name: cicd-workflow

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::528757791784:role/role_github_openID

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Hashicorp - Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: ./infra
        run: |
          terraform fmt -recursive
          terraform validate
        continue-on-error: false

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan

  deploy:
    name: Terraform apply
    needs: plan
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.tf_output.outputs.bucket_name }}
      api_url: ${{ steps.tf_output.outputs.api_url }}
      table_name: ${{ steps.tf_output.outputs.table_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform state
        uses: actions/cache@v4
        with:
          path: infra/terraform.tfstate
          key: terraform-state-${{ github.run_id }}
          restore-keys: |
            terraform-state-

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init -input=false -upgrade

      - name: Importar recursos existentes (evitar duplicação)
        working-directory: ./infra
        run: |
          # Importa DynamoDB se existir
          if aws dynamodb describe-table --table-name unasp-workshop-table >/dev/null 2>&1; then
            terraform import -input=false aws_dynamodb_table.workshop_table unasp-workshop-table || true
          fi
          # Importa bucket S3 se existir
          if aws s3api head-bucket --bucket unasp-workshop-2025-front >/dev/null 2>&1; then
            terraform import -input=false aws_s3_bucket.example unasp-workshop-2025-front || true
          fi
          # Importa Lambda se existir
          if aws lambda get-function --function-name unasp-workshop-lambda >/dev/null 2>&1; then
            terraform import -input=false aws_lambda_function.workshop_lambda unasp-workshop-lambda || true
          fi
          # Importa CloudWatch Log Group se existir
          if aws logs describe-log-groups --log-group-name-prefix /aws/lambda/unasp-workshop-lambda --query 'logGroups[0].logGroupName' --output text 2>/dev/null | grep -q "/aws/lambda/unasp-workshop-lambda"; then
            terraform import -input=false aws_cloudwatch_log_group.lambda_logs /aws/lambda/unasp-workshop-lambda || true
          fi
          # Importa API Gateway se existir (busca pelo nome)
          API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='unasp-workshop-api'].ApiId | [0]" --output text 2>/dev/null || echo "")
          if [ -n "$API_ID" ] && [ "$API_ID" != "None" ]; then
            terraform import -input=false aws_apigatewayv2_api.workshop_api "$API_ID" || true
            # Importa Stage da API Gateway se existir
            terraform import -input=false "aws_apigatewayv2_stage.workshop_stage" "$API_ID/\$default" || true
          fi
          # Importa Lambda Permission se existir
          if aws lambda get-policy --function-name unasp-workshop-lambda 2>/dev/null | grep -q "AllowExecutionFromAPIGateway"; then
            terraform import -input=false aws_lambda_permission.api_gw "unasp-workshop-lambda/AllowExecutionFromAPIGateway" || true
          fi

      - name: Terraform Apply
        working-directory: ./infra
        run: terraform apply -auto-approve
      
      - name: Capturar outputs do Terraform (bucket, api_url, table_name)
        id: tf_output
        working-directory: ./infra
        run: |
          BUCKET_NAME=$(terraform output -raw bucket_name)
          API_URL=$(terraform output -raw api_gateway_url)
          TABLE_NAME=$(terraform output -raw dynamodb_table_name)
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "table_name=$TABLE_NAME" >> $GITHUB_OUTPUT

  frontend-deploy:
    name: Build and deploy frontend to S3
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Gerar environment.prod.ts com outputs do Terraform
        working-directory: frontend
        run: |
          mkdir -p src/environments
          cat > src/environments/environment.prod.ts << 'EOF'
          export const environment = {
            production: true,
            apiUrl: '${{ needs.deploy.outputs.api_url }}',
            tableName: '${{ needs.deploy.outputs.table_name }}',
          };
          EOF

      - name: Build Angular (production)
        working-directory: frontend
        run: npm run build -- --configuration production

      - name: Sync build to S3
        env:
          S3_BUCKET: ${{ needs.deploy.outputs.bucket_name }}
        run: |
          # Se o build ssr criar pasta browser (Angular Universal), use ela; senão use a pasta dist principal
          if [ -d "frontend/dist/unasp-workshop-app/browser" ]; then
            aws s3 sync frontend/dist/unasp-workshop-app/browser s3://$S3_BUCKET --delete
          else
            aws s3 sync frontend/dist/unasp-workshop-app s3://$S3_BUCKET --delete
          fi
