name: cicd-workflow

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::528757791784:role/role_github_openID

jobs:
  plan:
    name: Terraform plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Hashicorp - Terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Terraform Init
        working-directory: ./infra
        run: terraform init

      - name: Terraform Validate
        working-directory: ./infra
        run: |
          terraform fmt -recursive
          terraform validate
        continue-on-error: false

      - name: Terraform Plan
        working-directory: ./infra
        run: terraform plan

  deploy:
    name: Terraform apply
    needs: plan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Importar tabela DynamoDB se já existir
        working-directory: ./infra
        run: |
          if aws dynamodb describe-table --table-name unasp-workshop-table; then
            terraform import aws_dynamodb_table.workshop_table unasp-workshop-table || true
          fi

      - name: Terraform Init && Apply
        working-directory: ./infra
        run: |
          terraform init
          terraform apply -auto-approve

  frontend-deploy:
    name: Build and deploy frontend to S3
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Angular (production)
        working-directory: frontend
        run: npm run build -- --configuration production

      - name: Sync build to S3
        env:
          S3_BUCKET: ${{ env.S3_BUCKET }}
        run: |
          # Se o build ssr criar pasta browser (Angular Universal), use ela; senão use a pasta dist principal
          if [ -d "frontend/dist/unasp-workshop-app/browser" ]; then
            aws s3 sync frontend/dist/unasp-workshop-app/browser s3://$S3_BUCKET --delete --acl public-read
          else
            aws s3 sync frontend/dist/unasp-workshop-app s3://$S3_BUCKET --delete --acl public-read
          fi

  lambda-deploy:
    name: Package and deploy Lambda
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for github actions
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }} 

      - name: Package lambda (zip)
        working-directory: lambda
        run: |
          # Remove any previous artifact
          rm -f ../lambda_function.zip
          # Zip current lambda folder contents (preserve structure)
          zip -r ../lambda_function.zip . -x "*.pyc" "__pycache__/*"

      - name: Deploy lambda (update-function-code)
        env:
          LAMBDA_NAME: ${{ env.LAMBDA_FUNCTION_NAME }}
        run: |
          if [ -z "$LAMBDA_NAME" ]; then
            echo "LAMBDA_FUNCTION_NAME is not set. Set repository secret LAMBDA_FUNCTION_NAME."; exit 1
          fi
          aws lambda update-function-code --function-name "$LAMBDA_NAME" --zip-file fileb://lambda_function.zip --region ${{ secrets.AWS_REGION }}
